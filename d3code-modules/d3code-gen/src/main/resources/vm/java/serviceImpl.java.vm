package ${packageName}.service.impl;

import com.alphay.boot.common.core.utils.MapstructUtils;
import com.alphay.boot.common.core.utils.StringUtils;
#if($table.crud)
import com.alphay.boot.common.mybatis.core.page.PageResult;
#end
import com.alphay.boot.common.mybatis.core.service.ServiceImplX;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.alphay.boot.common.mybatis.core.wrapper.LambdaQueryWrapperX;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ${packageName}.domain.bo.${ClassName}Bo;
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.${ClassName};
import ${packageName}.domain.param.${ClassName}QueryParam;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;

import java.util.List;
import java.util.Map;
import java.util.Collection;

/**
 * ${functionName}Service业务层处理
 *
 * @author Nottyjay
 * @since 1.0.0
 * @date ${datetime}
 */
@Slf4j
@Service
public class ${ClassName}ServiceImpl extends ServiceImplX<${ClassName}Mapper, ${ClassName}, ${ClassName}Vo> implements I${ClassName}Service {

#if($table.crud)
  /**
   * 分页查询${functionName}列表
   *
   * @param queryParam    查询条件
   * @return ${functionName}分页列表
   */
  @Override
  public PageResult<${ClassName}Vo> queryPageList(${ClassName}QueryParam queryParam) {
    return listPageVo(queryParam, buildQueryWrapper(queryParam));
  }
#end

  /**
   * 查询符合条件的${functionName}列表
   *
   * @param queryParam 查询条件
   * @return ${functionName}列表
   */
  @Override
  public List<${ClassName}Vo> queryList(${ClassName}QueryParam queryParam) {
    return listVo(buildQueryWrapper(queryParam))
  }

  private LambdaQueryWrapper<${ClassName}> buildQueryWrapper(${ClassName}QueryParam queryParam) {
    LambdaQueryWrapperX<${ClassName}> lqw = lambdaQueryWrapper();
#foreach($column in $columns)
#if($column.query)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#set($mpMethod=$column.queryType.toLowerCase())
#if($queryType != 'BETWEEN')
#if($javaType == 'String')
#set($condition='StringUtils.isNotBlank(queryParam.get'+$AttrName+'())')
#else
#set($condition='queryParam.get'+$AttrName+'() != null')
#end
    lqw.${mpMethod}IfPresent(${ClassName}::get$AttrName, queryParam.get$AttrName());
#else
    lqw.betweenIfPresent(
        ${ClassName}::get$AttrName ,queryParam.get$AttrName());
#end
#end
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#if($column.isPk==1)
    lqw.orderByAsc(${ClassName}::get$AttrName);
#end
#end
    return lqw;
  }

  /**
   * 新增${functionName}
   *
   * @param bo ${functionName}
   * @return 是否新增成功
   */
  @Override
  public Boolean insertByBo(${ClassName}Bo bo) {
    ${ClassName} add = MapstructUtils.convert(bo, ${ClassName}.class);
    validEntityBeforeSave(add);
    boolean flag = baseMapper.insert(add) > 0;
#set($pk=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
    if (flag) {
      bo.set$pk(add.get$pk());
    }
    return flag;
  }

  /**
   * 修改${functionName}
   *
   * @param bo ${functionName}
   * @return 是否修改成功
   */
  @Override
  public Boolean updateByBo(${ClassName}Bo bo) {
    ${ClassName} update = MapstructUtils.convert(bo, ${ClassName}.class);
    validEntityBeforeSave(update);
    return baseMapper.updateById(update) > 0;
  }

  /**
   * 保存前的数据校验
   */
  private void validEntityBeforeSave(${ClassName} entity){
    //TODO 做一些数据校验,如唯一约束
  }

  /**
   * 校验并批量删除${functionName}信息
   *
   * @param ids   待删除的主键集合
   * @param isValid 是否进行有效性校验
   * @return 是否删除成功
   */
  @Override
  public Boolean deleteWithValidByIds(Collection<${pkColumn.javaType}> ids, Boolean isValid) {
    if(isValid){
      //TODO 做一些业务上的校验,判断是否需要校验
    }
    return baseMapper.deleteByIds(ids) > 0;
  }
}
